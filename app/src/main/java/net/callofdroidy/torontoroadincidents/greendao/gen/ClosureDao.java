package net.callofdroidy.torontoroadincidents.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.callofdroidy.torontoroadincidents.Closure;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLOSURE".
*/
public class ClosureDao extends AbstractDao<Closure, String> {

    public static final String TABLENAME = "CLOSURE";

    /**
     * Properties of entity Closure.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property Road = new Property(1, String.class, "Road", false, "Road");
        public final static Property Name = new Property(2, String.class, "Name", false, "Name");
        public final static Property District = new Property(3, String.class, "District", false, "District");
        public final static Property Latitude = new Property(4, String.class, "Latitude", false, "Latitude");
        public final static Property Longitude = new Property(5, String.class, "Longitude", false, "Longitude");
        public final static Property RoadClass = new Property(6, String.class, "RoadClass", false, "RoadClass");
        public final static Property Planned = new Property(7, String.class, "Planned", false, "Planned");
        public final static Property SeverityOverride = new Property(8, String.class, "SeverityOverride", false, "SeverityOverride");
        public final static Property LastUpdated = new Property(9, String.class, "LastUpdated", false, "LastUpdated");
        public final static Property StartTime = new Property(10, String.class, "StartTime", false, "StartTime");
        public final static Property EndTime = new Property(11, String.class, "EndTime", false, "EndTime");
        public final static Property WorkPeriod = new Property(12, String.class, "WorkPeriod", false, "WorkPeriod");
        public final static Property Expired = new Property(13, String.class, "Expired", false, "Expired");
        public final static Property WorkEventType = new Property(14, String.class, "WorkEventType", false, "WorkEventType");
        public final static Property Contractor = new Property(15, String.class, "Contractor", false, "Contractor");
        public final static Property Description = new Property(16, String.class, "Description", false, "Description");
    }


    public ClosureDao(DaoConfig config) {
        super(config);
    }
    
    public ClosureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLOSURE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"Road\" TEXT," + // 1: Road
                "\"Name\" TEXT," + // 2: Name
                "\"District\" TEXT," + // 3: District
                "\"Latitude\" TEXT," + // 4: Latitude
                "\"Longitude\" TEXT," + // 5: Longitude
                "\"RoadClass\" TEXT," + // 6: RoadClass
                "\"Planned\" TEXT," + // 7: Planned
                "\"SeverityOverride\" TEXT," + // 8: SeverityOverride
                "\"LastUpdated\" TEXT," + // 9: LastUpdated
                "\"StartTime\" TEXT," + // 10: StartTime
                "\"EndTime\" TEXT," + // 11: EndTime
                "\"WorkPeriod\" TEXT," + // 12: WorkPeriod
                "\"Expired\" TEXT," + // 13: Expired
                "\"WorkEventType\" TEXT," + // 14: WorkEventType
                "\"Contractor\" TEXT," + // 15: Contractor
                "\"Description\" TEXT);"); // 16: Description
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLOSURE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Closure entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String Road = entity.getRoad();
        if (Road != null) {
            stmt.bindString(2, Road);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        String District = entity.getDistrict();
        if (District != null) {
            stmt.bindString(4, District);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(5, Latitude);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(6, Longitude);
        }
 
        String RoadClass = entity.getRoadClass();
        if (RoadClass != null) {
            stmt.bindString(7, RoadClass);
        }
 
        String Planned = entity.getPlanned();
        if (Planned != null) {
            stmt.bindString(8, Planned);
        }
 
        String SeverityOverride = entity.getSeverityOverride();
        if (SeverityOverride != null) {
            stmt.bindString(9, SeverityOverride);
        }
 
        String LastUpdated = entity.getLastUpdated();
        if (LastUpdated != null) {
            stmt.bindString(10, LastUpdated);
        }
 
        String StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindString(11, StartTime);
        }
 
        String EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindString(12, EndTime);
        }
 
        String WorkPeriod = entity.getWorkPeriod();
        if (WorkPeriod != null) {
            stmt.bindString(13, WorkPeriod);
        }
 
        String Expired = entity.getExpired();
        if (Expired != null) {
            stmt.bindString(14, Expired);
        }
 
        String WorkEventType = entity.getWorkEventType();
        if (WorkEventType != null) {
            stmt.bindString(15, WorkEventType);
        }
 
        String Contractor = entity.getContractor();
        if (Contractor != null) {
            stmt.bindString(16, Contractor);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(17, Description);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Closure entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String Road = entity.getRoad();
        if (Road != null) {
            stmt.bindString(2, Road);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        String District = entity.getDistrict();
        if (District != null) {
            stmt.bindString(4, District);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(5, Latitude);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(6, Longitude);
        }
 
        String RoadClass = entity.getRoadClass();
        if (RoadClass != null) {
            stmt.bindString(7, RoadClass);
        }
 
        String Planned = entity.getPlanned();
        if (Planned != null) {
            stmt.bindString(8, Planned);
        }
 
        String SeverityOverride = entity.getSeverityOverride();
        if (SeverityOverride != null) {
            stmt.bindString(9, SeverityOverride);
        }
 
        String LastUpdated = entity.getLastUpdated();
        if (LastUpdated != null) {
            stmt.bindString(10, LastUpdated);
        }
 
        String StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindString(11, StartTime);
        }
 
        String EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindString(12, EndTime);
        }
 
        String WorkPeriod = entity.getWorkPeriod();
        if (WorkPeriod != null) {
            stmt.bindString(13, WorkPeriod);
        }
 
        String Expired = entity.getExpired();
        if (Expired != null) {
            stmt.bindString(14, Expired);
        }
 
        String WorkEventType = entity.getWorkEventType();
        if (WorkEventType != null) {
            stmt.bindString(15, WorkEventType);
        }
 
        String Contractor = entity.getContractor();
        if (Contractor != null) {
            stmt.bindString(16, Contractor);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(17, Description);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Closure readEntity(Cursor cursor, int offset) {
        Closure entity = new Closure( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Road
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // District
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Latitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Longitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // RoadClass
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Planned
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // SeverityOverride
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // LastUpdated
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // StartTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // EndTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // WorkPeriod
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // Expired
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // WorkEventType
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Contractor
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // Description
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Closure entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRoad(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDistrict(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLatitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLongitude(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRoadClass(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPlanned(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSeverityOverride(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLastUpdated(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStartTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEndTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWorkPeriod(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setExpired(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWorkEventType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setContractor(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDescription(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Closure entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Closure entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Closure entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
